import datetime
from discord.ext.commands import Cog
from pymongo import MongoClient
import pymongo
from discord.ext import commands, tasks
import discord
from config import economySettings
import random


class Economic(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # Provide the mongodb atlas url to connect python to mongodb using pymongo
        self.CONNECTION_STRING = "mongodb+srv://MLB1:xeB-QAG-44s-9c6@cluster0.maorj.mongodb.net/myFirstDatabase?retryWrites=true&w=majority"
        # Create a connection using MongoClient. You can import MongoClient or use pymongo.MongoClient
        self.client = MongoClient(self.CONNECTION_STRING)

    @Cog.listener("on_ready")
    async def on_ready(self):
        self.bot.loop.create_task(self.check_server_members())
        self.leaderboard.start()

    @tasks.loop(minutes=1)
    async def leaderboard(self):
        schedule_time_minutes = ["0", "15", "30", "45"]
        try:
            if str(datetime.datetime.now().minute) in schedule_time_minutes:
                guild = self.bot.get_guild(economySettings["guild"])
                channel = guild.get_channel(economySettings["leaderBoardChannel"])

                await channel.purge(limit=1)

                dbname = self.client["server_economy"]
                collection_name = dbname["users_data"]
                result = collection_name.find().sort("balance", pymongo.DESCENDING).limit(10)
                embed = discord.Embed(title="–¢–æ–ø-10 –ª—É—á—à–∏—Ö –º–µ–º–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ Meme Land", color=0x42aaff)
                for num, rez in enumerate(result):
                    embed.add_field(name=f"**{ 'ü•á ' if num == 0 else 'ü•à ' if num == 1 else 'ü•â ' if num == 2 else ''}{num + 1}. {guild.get_member(rez['id'])}**", value=f"**Memecoins:** {rez['balance']} <:memeland_coin:939265285767192626>", inline=False)
                embed.set_thumbnail(url=guild.icon_url)
                await channel.send(embed=embed)
                print(f"{datetime.datetime.now().strftime('%H:%M:%S')} | [INFO] Leaderboard was sent")
        except AttributeError:
            pass

    @Cog.listener("on_member_join")
    async def on_member_join(self, member):
        await self.create_user_data(member)

    @Cog.listener("on_member_remove")
    async def on_member_remove(self, member):
        await self.remove_user_data(member)

    async def check_server_members(self):
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]
        guild = self.bot.get_guild(economySettings["guild"])
        for member in guild.members:
            if not member.bot and collection_name.find_one({"id": member.id}) is None:
                await self.create_user_data(member)
        print(f"{datetime.datetime.now().strftime('%H:%M:%S')} | [INFO] Members checked")

    @commands.command()
    @commands.is_owner()
    async def send_data(self, ctx, member: discord.Member):
        if member is not None:
            await self.create_user_data(member)
        else:
            await self.create_user_data(ctx.author)

    async def create_user_data(self, member: discord.Member):
        # Create the database for our example (we will use the same database throughout the tutorial
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]
        if collection_name.find_one({"id": member.id}) is None:
            user_data = {
                "id": member.id,
                "balance": 0,
                "nextReward": datetime.datetime.now() + datetime.timedelta(seconds=economySettings["delayRewardSeconds"])
            }
            collection_name.insert_one(user_data)
            print(f"{datetime.datetime.now().strftime('%H:%M:%S')} | [INFO] Created and sent data of user {member.display_name}")
            return True
        else:
            print(f"{datetime.datetime.now().strftime('%H:%M:%S')} | [INFO] Sent data of user {member.display_name}")
            return True

    async def remove_user_data(self, member: discord.Member):
        # Create the database for our example (we will use the same database throughout the tutorial
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]
        collection_name.delete_one({'id': member.id})
        print(f"{datetime.datetime.now().strftime('%H:%M:%S')} | [INFO] Data of {member.display_name} was deleted")

    @commands.command()
    @commands.has_role(economySettings["moderatorAndAdministratorRolesID"])
    @commands.is_owner()
    @commands.has_permissions(administrator=True)
    async def add_money(self, ctx, member: discord.Member, money: int):
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]
        result = collection_name.find_one({"id": member.id})
        if result is not None:
            var = result["balance"] + money
            collection_name.update_one(result, {"$set": {"balance": var}})
            embed = discord.Embed(title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                                  description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} –Ω–∞—á–∏—Å–ª–∏–ª–æ—Å—å **{money}** <:memeland_coin:939265285767192626>: "
                                              f"\n> –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: **{result['balance']} <:memeland_coin:939265285767192626>** >> **{result['balance'] + money}** <:memeland_coin:939265285767192626>",
                                  color=economySettings["success_color"])
            embed.set_footer(
                text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
            await ctx.reply(embed=embed)
        else:
            status = await self.create_user_data(member=member)
            if status:
                await self.set_money(ctx=ctx, member=member, money=money)
            else:
                embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–ò—Å–∫–æ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", color=economySettings["error_color"])
                embed.set_footer(
                    text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
                await ctx.reply(embed=embed)

    @commands.command()
    @commands.has_role(economySettings["moderatorAndAdministratorRolesID"])
    @commands.is_owner()
    @commands.has_permissions(administrator=True)
    async def set_money(self, ctx, member: discord.Member, money: int):
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]
        result = collection_name.find_one({"id": member.id})
        if result is not None:
            collection_name.update_one(result, {"$set": {"balance": money}})
            embed = discord.Embed(title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                                  description=f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} –∏–∑–º–µ–Ω—ë–Ω: "
                                              f"\n> –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: **{result['balance']} <:memeland_coin:939265285767192626>** >> **{money}** <:memeland_coin:939265285767192626>",
                                  color=economySettings["success_color"])
            embed.set_footer(text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
            await ctx.reply(embed=embed)
        else:
            status = await self.create_user_data(member=member)
            if status:
                await self.set_money(ctx=ctx, member=member, money=money)
            else:
                embed = discord.Embed(title="–û—à–∏–±–∫–∞", description="–ò—Å–∫–æ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", color=economySettings["error_color"])
                embed.set_footer(
                    text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
                await ctx.reply(embed=embed)

    @commands.command(name="balance", aliases=["–±–∞–ª–∞–Ω—Å"])
    async def balance(self, ctx, member: discord.Member = None):
        if member is None:
            member = ctx.author
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]
        result = collection_name.find_one({"id": member.id})
        if result is not None:
            embed = discord.Embed(title=f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                                  description=f"–ë–∞–ª–∞–Ω—Å {member.mention} –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç: **{result['balance']}** <:memeland_coin:939265285767192626>",
                                  color=economySettings["success_color"])
            embed.set_footer(text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
            await ctx.reply(embed=embed)
        else:
            await self.create_user_data(member=member)
            await self.balance(ctx=ctx, member=member)

    @commands.command(name="send_money", aliases=["send", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"])
    async def send_money(self, ctx, member: discord.Member, money: int):
        dbname = self.client['server_economy']
        collection_name = dbname["users_data"]

        sender_result = collection_name.find_one({"id": ctx.author.id})

        if sender_result is None:
            await self.create_user_data(member=ctx.author)

        if sender_result["balance"] >= money:
            collection_name.update_one(sender_result, {"$set": {"balance": sender_result["balance"] - money}})

            giver_result = collection_name.find_one({"id": member.id})
            if giver_result is None:
                await ctx.send(embed=discord.Embed(
                title="–û—à–∏–±–∫–∞", description="–ò—Å–∫–æ–º—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", color=economySettings["error_color"]))
                return
            collection_name.update_one(giver_result, {"$set": {"balance": giver_result["balance"] + money}})
            embed = discord.Embed(title="–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
                                  description=f"**{money}** <:memeland_coin:939265285767192626> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}",
                                  color=economySettings["success_color"])
            embed.set_footer(
                text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
            await ctx.reply(embed=embed)
        else:
            embed = discord.Embed(
                title="–û—à–∏–±–∫–∞", description="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", color=economySettings["error_color"])
            embed.set_footer(
                text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {ctx.author} üûÑ {datetime.datetime.now().strftime('%m.%d.%Y %H:%M:%S')}")
            await ctx.reply(embed=embed)

    def dsi_check_user_like(self, message: discord.Message):
        # –õ–æ–≥ –ö–∞–Ω–∞–ª –õ–∞–π–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if message.channel.id != 581415119645573121:
            return None
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞/–±–æ—Ç–∞, –Ω–µ –æ—Ç –≤–µ–±—Ö—É–∫ –ª–æ–≥–∞
        if message.webhook_id == None:
            return None
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–º–±–µ–¥–æ–≤
        if not message.embeds:
            return None

        for embed in message.embeds:
            try:
                server = message.author.name
                server = server.split(" | ")
                server = server[-1].rsplit("#", maxsplit=1)[0]
                server_id = int(server)
                if server_id != economySettings["guild"]:
                    # –õ–∞–π–∫ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    return None

                author = embed.author.name
                author = author.split(" | ")
                author = self.bot.get_user(int(author[-1]))

                if not author:
                    # –Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                    return None
                # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ —é–∑–µ—Ä–∞
                return author
            except Exception as e:
                pass
        # –í–∞–ª–∏–¥–Ω—ã–π –µ–º–±–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None

    @Cog.listener("on_message")
    async def check_message(self, message):
        user = self.dsi_check_user_like(message)
        if user:
            await message.reply(embed=discord.Embed(title="–ù–∞–≥—Ä–∞–¥–∞", description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –±–∞–º–ø —Å–µ—Ä–≤–µ—Ä–∞! –ü–æ–ª—É—á–µ–Ω—ã: {economySettings['monitoringReward']} <:memeland_coin:939265285767192626>",
                                                    color=economySettings["attention_color"]))
            dbname = self.client['server_economy']
            collection_name = dbname["users_data"]
            result = collection_name.find_one({"id": user.id})
            if result is not None:
                collection_name.update_one(result, {"$set": {"balance": economySettings["monitoringReward"]}})
            else:
                await self.create_user_data(message.author)
                dbname = self.client['server_economy']
                collection_name = dbname["users_data"]
                result = collection_name.find_one({"id": user.id})
                collection_name.update_one(result, {"$set": {"balance": economySettings["monitoringReward"]}})

        try:
            if economySettings["memeChannel"] is None or message.channel.id == economySettings["memeChannel"]:
                dbname = self.client['server_economy']
                collection_name = dbname["users_data"]
                result = collection_name.find_one({"id": message.author.id})
                if result["nextReward"] < datetime.datetime.now():
                    randomMoney = random.randint(economySettings["randomMoneyForMessageMin"],
                                                 economySettings["randomMoneyForMessageMax"])
                    res_bal = result['balance'] + randomMoney
                    collection_name.update_one(result, {"$set": {"balance": res_bal,
                                                                 "nextReward": datetime.datetime.now() + datetime.timedelta(
                                                                     seconds=economySettings["delayRewardSeconds"])}})
                    print(f"{message.author.display_name} reached a reward."
                          f"\nAdded Money: {randomMoney}")
        except Exception:
            pass