import datetime
import sys

import discord
from discord import app_commands
from discord.ext import commands, tasks
from discord.ext.commands import Cog

from classes.DataBase import get_auto_meme_guilds, get_auto_meme_guild, add_auto_meme_guild, update_autoposing_in_guild, \
    delete_guild_from_auto_meme_list
from classes.Logger import log_to_console
from classes.MemeObjects import RandomedMeme
from cogs.memes_watching import LikeMeme


class MemeAutoPosting(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.sorted_channels_in_guilds = {}
        self.time_left = 0

    @Cog.listener("on_ready")
    async def on_ready(self):
        unsorted_channels_in_guilds = {}
        auto_meme_guilds = get_auto_meme_guilds()
        for guild in auto_meme_guilds:
            if unsorted_channels_in_guilds.get(guild["posting_time"]) is None:
                unsorted_channels_in_guilds[guild["posting_time"]] = [guild["channel_id"]]
            else:
                unsorted_channels_in_guilds[guild["posting_time"]].append(guild["channel_id"])

        for channel in self.bot.get_all_channels():
            for key, channel_ids in unsorted_channels_in_guilds.items():
                if channel.id in channel_ids:
                    self.add_or_update_to_sorted_list(key, channel)
        self.auto_post_meme.start()

    @tasks.loop(minutes=15)
    async def auto_post_meme(self):
        log_to_console("Starting Auto Posting memes")
        channels = []
        for key, value in self.sorted_channels_in_guilds.items():
            if self.time_left % key == 0:
                channels.extend(value)
        self.time_left += 15

        for channel in channels:
            try:
                meme = RandomedMeme(self.bot, False)
                await channel.send(embed=meme.get_embed(title="‚ùÑ –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º—á–∏–∫! ‚ùÑ"), view=LikeMeme(
                    meme_id=meme.get_meme_id(),
                    bot=self.bot))
            except discord.Forbidden:
                guild = get_auto_meme_guild(channel.guild.id)
                delete_guild_from_auto_meme_list(guild)
                print("done!")
            except discord.HTTPException:
                pass
        log_to_console("Auto Posting meme done")

    @app_commands.command(description="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤ —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç")
    @app_commands.describe(channel="–ö–∞–Ω–∞–ª, –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å –º–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª)")
    @app_commands.checks.has_permissions(administrator=True, manage_guild=True)
    @app_commands.choices(time=[
        app_commands.Choice(name="15 –º–∏–Ω—É—Ç", value=15),
        app_commands.Choice(name="30 –º–∏–Ω—É—Ç", value=30),
        app_commands.Choice(name="45 –º–∏–Ω—É—Ç", value=45),
        app_commands.Choice(name="1 —á–∞—Å", value=60)
    ])
    async def auto_meme(self, interaction: discord.Interaction, time: app_commands.Choice[int],
                        channel: discord.TextChannel = None):
        if channel is None:
            channel = interaction.channel

        result = get_auto_meme_guild(interaction.guild_id)
        if result is None:
            add_auto_meme_guild(interaction.guild_id, channel.id, time.value)
        else:
            update_autoposing_in_guild(result, channel.id, time.value)
        self.add_or_update_to_sorted_list(time.value, channel)

        embed = discord.Embed(title="–ö—Ä—É—Ç–æ! üéâ",
                              description=f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª–µ: {channel.mention}"
                                          f"\n–í—Ä–µ–º—è –º–µ–∂–¥—É –º–µ–º–∞–º–∏: `{time.value} –º–∏–Ω—É—Ç`",
                              colour=discord.Colour.green())
        embed.set_footer(text="üîï –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_auto_meme")
        await interaction.response.send_message(embed=embed)

    @app_commands.command(description="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
    @app_commands.checks.has_permissions(administrator=True, manage_guild=True)
    async def stop_auto_meme(self, interaction: discord.Interaction):
        result = get_auto_meme_guild(interaction.guild_id)
        if result is not None:
            self.remove_from_sorted_list(result["posting_time"], result["channel_id"])
            delete_guild_from_auto_meme_list(result)
            await interaction.response.send_message(
                embed=discord.Embed(title="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ üîï",
                                    description=f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üò¢",
                                    colour=discord.Colour.yellow(),
                                    timestamp=datetime.datetime.now()))
        else:
            await interaction.response.send_message(
                embed=discord.Embed(title="–ê—Ö—Ç—É–Ω–≥! ‚ùå",
                                    description=f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤",
                                    colour=discord.Colour.red(),
                                    timestamp=datetime.datetime.now()))

    @app_commands.command(description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
    @app_commands.checks.has_permissions(administrator=True, manage_guild=True)
    @app_commands.guilds(892493256129118260, 766386682047365190)
    async def auto_meme_info(self, interaction: discord.Interaction):
        auto_guild_data = get_auto_meme_guild(interaction.guild_id)
        if auto_guild_data is not None:
            await interaction.response.send_message(embed=discord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {interaction.guild}",
                                                                        description=f"–ö–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: <#{auto_guild_data['channel_id']}>"
                                                                                    f"\n–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –º–µ–º–∞–º–∏: `{auto_guild_data['posting_time']} –º–∏–Ω—É—Ç`",
                                                                        colour=discord.Colour.green()))
        else:
            await interaction.response.send_message(embed=discord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {interaction.guild}",
                                                                        description=f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º–µ–º–æ–≤ üòî"
                                                                                    f"\n"
                                                                                    f"\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥, –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ª–∏–±–æ –±–æ—Ç –Ω–µ —Å–º–æ–≥ —Å–∫–∏–Ω—É—Ç—å –º–µ–º –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –ø—Ä–∏–≤–µ–ª–æ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
                                                                        colour=discord.Colour.red()))

    def add_or_update_to_sorted_list(self, key, value):
        if self.sorted_channels_in_guilds.get(key) is None:
            self.sorted_channels_in_guilds[key] = [value]
        else:
            self.sorted_channels_in_guilds[key].append(value)
        print(self.sorted_channels_in_guilds)

    def remove_from_sorted_list(self, key, value: int):
        print(self.sorted_channels_in_guilds)
        if self.sorted_channels_in_guilds.get(key) is not None:
            list_of_channels = []
            for channel in self.sorted_channels_in_guilds[key]:
                if channel.id != value:
                    list_of_channels.append(channel)
            self.sorted_channels_in_guilds[key] = list_of_channels
        print(self.sorted_channels_in_guilds)


async def setup(bot):
    log_to_console(f"Loaded {__file__}")
    await bot.add_cog(MemeAutoPosting(bot))
